/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EventManager {
  export type EventStruct = {
    title: string;
    description: string;
    date: BigNumberish;
    location: string;
    organizer: AddressLike;
    ticketPrice: BigNumberish;
  };

  export type EventStructOutput = [
    title: string,
    description: string,
    date: bigint,
    location: string,
    organizer: string,
    ticketPrice: bigint
  ] & {
    title: string;
    description: string;
    date: bigint;
    location: string;
    organizer: string;
    ticketPrice: bigint;
  };
}

export interface EventManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "createEvent" | "eventCount" | "events" | "getEvent"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvent",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEvent", data: BytesLike): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    title: string,
    description: string,
    date: BigNumberish,
    location: string,
    organizer: AddressLike,
    ticketPrice: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    title: string,
    description: string,
    date: bigint,
    location: string,
    organizer: string,
    ticketPrice: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    title: string;
    description: string;
    date: bigint;
    location: string;
    organizer: string;
    ticketPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventManager extends BaseContract {
  connect(runner?: ContractRunner | null): EventManager;
  waitForDeployment(): Promise<this>;

  interface: EventManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [
      title: string,
      description: string,
      date: BigNumberish,
      location: string,
      ticketPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  eventCount: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint] & {
        title: string;
        description: string;
        date: bigint;
        location: string;
        organizer: string;
        ticketPrice: bigint;
      }
    ],
    "view"
  >;

  getEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [EventManager.EventStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      date: BigNumberish,
      location: string,
      ticketPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint] & {
        title: string;
        description: string;
        date: bigint;
        location: string;
        organizer: string;
        ticketPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEvent"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [EventManager.EventStructOutput],
    "view"
  >;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,string,string,int64,string,address,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
  };
}
